---
import Header from "@/components/Header.astro";
interface Props {
  title?: string;
}
const { title = "i's site" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="tabular-nums">
    <div id="noise-mask"></div>
    <Header />
    <slot />
  </body>
</html>

<script>
  import posthog from "posthog-js";
  if (import.meta.env.PROD) {
    posthog.init(import.meta.env.PUBLIC_POSTHOG_KEY, {
      api_host: import.meta.env.PUBLIC_POSTHOG_API_HOST,
      person_profiles: "always",
    });
  }
</script>

<script is:inline>
  let userTheme = localStorage.getItem("theme");
  const hasUserTheme = localStorage.getItem("user-theme");
  let defaultTheme = "light";
  if (hasUserTheme) {
    if (![null, "light", "dark"].includes(userTheme)) {
      localStorage.removeItem("theme");
      userTheme = null;
    }
    defaultTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }
  if (userTheme === defaultTheme) {
    localStorage.removeItem("theme");
  }
  document.documentElement.classList.remove("light", "dark");
  document.documentElement.classList.add(userTheme ?? defaultTheme);
</script>

<style is:inline>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }

  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    position: relative;
    text-rendering: optimizeLegibility;
    text-underline-offset: 0.2rem;
    /* font-size: 1.125rem; */
    /* line-height: 1.75rem; */
  }

  #noise-mask {
    pointer-events: none;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 999999;
    overflow: hidden;
    width: 100%;
    height: 100%;
    opacity: 8%;
    background:
      repeating-radial-gradient(#000 0 0.0001%, #fff 0 0.0002%) 50% 0/2500px
        2500px,
      repeating-conic-gradient(#000 0 0.0001%, #fff 0 0.0002%) 60% 60%/2500px
        2500px;
    background-blend-mode: difference;
    animation: noise-anim 0.2s infinite alternate;
  }

  @keyframes noise-anim {
    100% {
      background-position:
        50% 0,
        60% 50%;
    }
  }

  *,
  *::before,
  *::after {
    min-width: 0;
    border-color: hsl(var(--border));
  }

  :root {
    --accent: 18 100% 50%;
    --accent-foreground: 18 100% 98%;
    --primary: 0 0% 12%;
    --primary-foreground: 0 0% 93.5%;
    --background: 0 0% 92.5%;
    --foreground: 0, 0%, 12%;
    --border: 0 0% 12%;
    --muted: 0 0% 95%;
    --muted-foreground: 0 0% 60%;
    color-scheme: light;
  }

  @media (prefers-color-scheme: dark) {
    :root:not(.light) {
      --accent: 18 100% 60%;
      --primary: 0 0% 88%;
      --primary-foreground: 0 0% 6.5%;
      --background: 0 0% 7%;
      --foreground: 0 0% 85%;
      --border: 0 0% 85%;
      --muted: 0 0% 5%;
      --muted-foreground: 0 0% 55%;
      color-scheme: dark;
    }
  }

  :root.dark {
    --accent: 18 100% 60%;
    --primary: 0 0% 88%;
    --primary-foreground: 0 0% 6.5%;
    --background: 0 0% 7%;
    --foreground: 0 0% 85%;
    --border: 0 0% 85%;
    --muted: 0 0% 5%;
    --muted-foreground: 0 0% 55%;
    color-scheme: dark;
  }
</style>
